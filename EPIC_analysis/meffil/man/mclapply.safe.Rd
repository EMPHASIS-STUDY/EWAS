% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mclapply.r
\name{mclapply.safe}
\alias{mclapply.safe}
\title{mclapply without the 2Gb output memory bound.}
\usage{
mclapply.safe(X, FUN, ..., max.bytes = 2^30 - 1)
}
\arguments{
\item{X}{Same as \code{\link[parallel]{mclapply}()}:
A vector (atomic or list) or an expressions vector.
Other objects (including classed objects) will be coerced by
\code{\link{as.list}()}.}

\item{FUN}{Same as \code{\link[parallel]{mclapply}()}:
The function to be applied to each element of 'X'.}

\item{...}{Optional arguments to \code{FUN} and \code{\link[parallel]{mclapply}()}.}

\item{max.bytes}{The size in memory of the largest object that can
be returned by \code{\link[parallel]{mclapply}} (Default: 2Gb-1).}
}
\value{
Same as \code{\link[parallel]{mclapply}()},
a list of the same length as 'X' and named by 'X'.
Element i is equal to \code{FUN(X[[i]])}.

mclapply() has another problem besides an output memory limit.
If some magical process in linux called OOM (out of memory) decides
that a fork is using too much memory, then it simply kills it without
any warning or message.  In such cases, mclapply() will simply return NULL.

http://stackoverflow.com/questions/20674538/mclapply-returns-null-randomly

In these functions, the output is tested for NULL return values.
They are assumed to be due to memory errors so the FUN argument
should not return NULL.
}
\description{
mclapply without the 2Gb output memory bound.
}
